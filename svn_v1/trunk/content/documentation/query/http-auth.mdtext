Title: HTTP Authentication in ARQ
Notice:    Licensed to the Apache Software Foundation (ASF) under one
           or more contributor license agreements.  See the NOTICE file
           distributed with this work for additional information
           regarding copyright ownership.  The ASF licenses this file
           to you under the Apache License, Version 2.0 (the
           "License"); you may not use this file except in compliance
           with the License.  You may obtain a copy of the License at
           .
             http://www.apache.org/licenses/LICENSE-2.0
           .
           Unless required by applicable law or agreed to in writing,
           software distributed under the License is distributed on an
           "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
           KIND, either express or implied.  See the License for the
           specific language governing permissions and limitations
           under the License.

As of ARQ 2.10.2 there is a new unified HTTP operation framework that provides a uniform mechanism for 
HTTP authentication that also allows ARQ to support a broader range of authentication mechanisms than were previously possible.

### Authenticators

Authentication mechanisms are provided by [HttpAuthenticator][1] implementations of which a number are provided built into ARQ.

This API provides the authenticator with access to the `HttpClient`, `HttpContext` and target `URI` of the request that is about to be carried out.  This allows for authenticators
to add credentials to requests on a per-request basis and/or to use different mechanisms and credentials for different services.

#### SimpleAuthenticator

The [simple authenticator][2] is as the name suggests the simplest implementation.  It takes a single set of credentials which is applied to
any service.

Authentication however is not preemptive so unless the remote service sends a HTTP challenge (401 Unauthorized or 407 Proxy Authorization Required) then
credentials will not actually be submitted.

#### ScopedAuthenticator

The [scoped authenticator][3] is an authenticator which maps credentials to different service URIs.  This allows you to specify different credentials for different services 
as appropriate.  Similarly to the simple authenticator this is not preemptive authentication so credentials are not sent unless the service requests them.

Scoping of credentials is not based on exact mapping of the request URI to credentials but rather on a longest match approach.  For example if you define credentials
for `http://example.org` then these are used for any request that requires authentication under that URI e.g. `http://example.org/some/path`.  However if you
had defined credentials for `http://example.org/some/path` then these would be used in favor of those for `http://example.org`

#### ServiceAuthenticator

The [service authenticator][4] is an authenticator which uses information encoded in the ARQ context and basically provides access to the existing credential provision
mechanisms provided for the `SERVICE` clause, see [Basic Federated Query][5] for more information on configuration for this.

#### FormsAuthenticator

The [forms authenticator][6] is an authenticator usable with services that require form based logins and use cookies to verify login state.  This is intended for use with
services that don't support HTTP's built-in authentication mechanisms for whatever reason.  One example of this are servers secured using Apache HTTP Server [mod_auth_form][7].

#### PreemptiveBasicAuthenticator

This [authenticator][8] is a decorator over another authenticator that enables preemptive basic authentication.

This is not enabled by default for two reasons:

 1. It reduces security as it can result in sending credentials to servers that don't actually require them.
 2. It only works for basic authentication and not for other HTTP authentication mechanisms e.g. digest authentication

#### DelegatingAuthenticator

The [delegating authenticator][12] allows for mapping different authenticators to different services, this is useful when you need to mix and match the types of authentication needed.

## Applying Authentication

APIs that support authentication typically provide two methods for providing authenticators, a `setAuthentication(String username, char[] password)` method
which merely configures a `SimpleAuthenticator`.  There will also be a `setAuthenticator(HttpAuthenticator authenticator)` method
that allows you to configure an arbitrary authenticator.

Authenticators applied this way will only be used for requests by that specific API.  APIs that currently support this are as follows:

  - [QueryEngineHTTP][9] - This is the `QueryExecution` implementation returned by `QueryExecutionFactory.sparqlService()` calls
  - [UpdateProcessRemoteBase][10] - This is the base class of `UpdateProcessor` implementations returned by `UpdateExecutionFactory.createRemote()` and `UpdateExecutionFactory.createRemoteForm()` calls
  - [DatasetGraphAccessorHTTP][11] - This is the `DatasetGraphAccessor` implementation underlying remote dataset accessors.

From 2.10.2 onwards the relevant factory methods include overloads that allow providing a `HttpAuthenticator` at creation time which
avoids the needs to cast and manually set the authenticator afterwards.

### The Default Authenticator

Since it may not always be possible/practical to configure authenticators on a per-request basis the API includes a means to specify a default authenticator
that is used when no authenticator is explicitly specified.  This may be configured via the `setDefaultAuthenticator(HttpAuthenticator authenticator)`
method of the [HttpOp][13] class.

By default there is already a default authenticator configured which is the `ServiceAuthenticator` since this preserves behavioural 
backwards compatibility with prior versions of ARQ.

You can configure the default authenticator to whatever you need so even if you don't directly control the code
that is making HTTP requests provided that it is using ARQs APIs to make these then authentication will
still be applied.

Note that the default authenticator may be disabled by setting it to `null`.

  [1]: http://jena.apache.org/documentation/javadoc/arq/org/apache/jena/atlas/web/auth/HttpAuthenticator.html
  [2]: http://jena.apache.org/documentation/javadoc/arq/org/apache/jena/atlas/web/auth/SimpleAuthenticator.html
  [3]: http://jena.apache.org/documentation/javadoc/arq/org/apache/jena/atlas/web/auth/ScopedAuthenticator.html
  [4]: http://jena.apache.org/documentation/javadoc/arq/org/apache/jena/atlas/web/auth/ServiceAuthenticator.html
  [5]: service.html
  [6]: http://jena.apache.org/documentation/javadoc/arq/org/apache/jena/atlas/web/auth/FormsAuthenticator.html
  [7]: https://httpd.apache.org/docs/2.4/mod/mod_auth_form.html
  [8]: http://jena.apache.org/documentation/javadoc/arq/org/apache/jena/atlas/web/auth/PreemptiveBasicAuthenticator.html
  [9]: http://jena.apache.org/documentation/javadoc/arq/com/hp/hpl/jena/sparql/engine/http/QueryEngineHTTP.html
  [10]: http://jena.apache.org/documentation/javadoc/arq/com/hp/hpl/jena/sparql/modify/UpdateProcessRemoteBase.html
  [11]: http://jena.apache.org/documentation/javadoc/arq/org/apache/jena/web/DatasetGraphAccessorHTTP.html
  [12]: http://jena.apache.org/documentation/javadoc/arq/org/apache/jena/atlas/web/auth/DelegatingAuthenticator.html
  [13]: http://jena.apache.org/documentation/javadoc/arq/org/apache/jena/riot/web/HttpOp.html